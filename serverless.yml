# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: costumer-slss-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}
  region: us-east-1
  environment:
    COSTUMERS_TABLE: ${env:COSTUMERS_TABLE}
    REGION: ${env:REGION}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT} 
    ELASTICSEARCH_URL:
      Fn::GetAtt: ["CostumersSearch", "DomainEndpoint"]
  profile: default
  memorySize: 256
  timeout: 10
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:putItem
        - dynamodb:getItem
        - dynamodb:deleteItem
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
      Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  

# [optional] in custom, you can set custom variable that you can use in file anywhere
custom:
  # stage: ${opt:stage, self:provider.stage}
  serverless-offline:
    port: 3001
  prune:
    automatic: true
    includeLayers: true
    number: 3
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      migrate: true

functions:
  putCostumer:
    handler: 'src/api/costumers/put.default'
    description: upsert costumers
    events:
      - http:
          path: /
          method: put
  getCostumers: 
    handler: 'src/api/costumers/get.default'
    description: get many costumers paginated
    events:
      - http:
          path: /
          method: get
          request:
            parameters:
              querystrings:
                limit : true
                lastKey : true
  getCostumer: 
    handler: 'src/api/costumers/{username}/get.default'
    description: get one costumer by its username
    events:
      - http:
          path: /{username}
          method: get
          request:
            parameters:
              paths:
                username: true
  deleteConstumer: 
    handler: 'src/api/costumers/{username}/delete.default'
    description: delete costumer by its username
    events:
      - http:
          path: /{username}
          method: delete
          request:
            parameters:
              paths:
                username: true
  dynamodbToElasticSearch:    
    handler: 'src/infra/dynamodb-to-elasticsearch.default'
    environment:
      ES_HOST: ''
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [CostumersTable, StreamArn]
              
resources: # CloudFormation template syntax from here on.
  Resources:
    CostumersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COSTUMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CostumersSearch:
        Type: "AWS::Elasticsearch::Domain"
        Properties:
          ElasticsearchVersion: "7.7"
          DomainName: "costumers-search"
          ElasticsearchClusterConfig:
            DedicatedMasterEnabled: false
            InstanceCount: "1"
            ZoneAwarenessEnabled: false
            InstanceType: "t2.small.elasticsearch"
          EBSOptions:
            EBSEnabled: true
            Iops: 0
            VolumeSize: 10
            VolumeType: "gp2"
          AccessPolicies:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  AWS: '*'
                Action: 'es:*'
                Resource: "arn:aws:es:us-east-1:xxxxxx:domain/xxxxx/*"
                Condition:
                  IpAddress:
                    aws:SourceIp: 
                      - "YOUR_LOCAL_MACHINE_IP_FOR_TESTING_HERE"
                                                                                                 
