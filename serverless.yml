# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: costumers-slss-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "dev"}
  region: us-east-1
  environment:
    COSTUMERS_TABLE: ${env:COSTUMERS_TABLE}
    REGION: ${env:REGION}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT} 
  # [optional] specify profile set via aws configure --profile profileName
  profile: default
  # [optional] size in MB
  memorySize: 256
  # [optional] size in Seconds
  timeout: 10
  # [optional] enable tracing
  tracing: true # enable tracing
  # [optional] you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - serverless-dotenv-plugin
  

# [optional] in custom, you can set custom variable that you can use in file anywhere
custom:
  # stage: ${opt:stage, self:provider.stage}
  serverless-offline:
    port: 3001
  prune:
    automatic: true
    includeLayers: true
    number: 3
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      migrate: true

functions:
  putCostumer:
    handler: 'src/costumers/put.default'
    description: upsert costumers
    events:
      - http:
          path: /
          method: put
  getCostumers: 
    handler: 'src/costumers/get.default'
    description: get many costumers paginated
    events:
      - http:
          path: /
          method: get
          request:
            parameters:
              querystrings:
                limit : true
                lastKey : true
  getCostumer: 
    handler: 'src/costumers/{username}/get.default'
    description: get one costumer by its username
    events:
      - http:
          path: /{username}
          method: get
          request:
            parameters:
              paths:
                username: true
  deleteConstumer: 
    handler: 'src/costumers/{username}/delete.default'
    description: delete costumer by its username
    events:
      - http:
          path: /{username}
          method: delete
          request:
            parameters:
              paths:
                username: true
              
resources: # CloudFormation template syntax from here on.
  Resources:
    constumersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COSTUMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
                                                                                                 
